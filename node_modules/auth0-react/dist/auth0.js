"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var auth0_js_1 = require("auth0-js");
var Auth0 = /** @class */ (function () {
    function Auth0(audience, domain, clientId, redirectUri, logoutRedirectUri, renewalThreshold) {
        if (renewalThreshold === void 0) { renewalThreshold = 0; }
        this.logoutRedirectUri = logoutRedirectUri;
        this.renewalThreshold = renewalThreshold;
        this.ignoreRenewalThreshold = false;
        this.auth0 = new auth0_js_1.WebAuth({
            audience: audience,
            domain: domain,
            clientID: clientId,
            redirectUri: redirectUri,
            responseType: 'token id_token',
            scope: 'openid email'
        });
    }
    Auth0.prototype.login = function () {
        console.debug('[Auth0] Started login');
        this.auth0.authorize();
    };
    Auth0.prototype.handleCallback = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                console.debug('[Auth0] Received auth callback');
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.auth0.parseHash(function (error, authResult) {
                            if (authResult && authResult.accessToken && authResult.idToken) {
                                console.debug('[Auth0] Logged in successfully');
                                _this.setSession(authResult);
                                resolve(authResult);
                            }
                            else {
                                console.error('[Auth0] Error logging in', error);
                                reject(error);
                            }
                        });
                    })];
            });
        });
    };
    Auth0.prototype.renewSession = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                console.debug('[Auth0] Started renewing session');
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.auth0.checkSession({}, function (error, authResult) {
                            if (authResult && authResult.accessToken && authResult.idToken) {
                                console.debug('[Auth0] Success renewing session');
                                _this.setSession(authResult);
                                resolve(authResult);
                            }
                            else {
                                console.error('[Auth0] Error renewing session', error);
                                _this.logout();
                                reject(error);
                            }
                        });
                    })];
            });
        });
    };
    Auth0.prototype.logout = function (onSuccess) {
        this.accessToken = undefined;
        this.expiresAt = 0;
        this.userInfo = undefined;
        this.ignoreRenewalThreshold = false;
        this.auth0.logout({
            returnTo: this.logoutRedirectUri
        }, function (error) {
            if (error) {
                console.error('[Auth0] Error logging out', error);
            }
            else if (onSuccess) {
                onSuccess();
            }
        });
    };
    Object.defineProperty(Auth0.prototype, "isAuthenticated", {
        get: function () {
            return this.hasValidToken && !!this.userInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Auth0.prototype, "hasValidToken", {
        get: function () {
            return !!this.accessToken && !this.hasExpired;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Auth0.prototype, "hasExpiredToken", {
        get: function () {
            return !!this.accessToken && this.hasExpired;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Auth0.prototype, "hasExpired", {
        get: function () {
            var threshold = this.ignoreRenewalThreshold ? 0 : this.renewalThreshold * 1000;
            return this.expiresAt - threshold < new Date().getTime();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Auth0.prototype, "email", {
        get: function () {
            if (this.userInfo)
                return this.userInfo.email;
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Auth0.prototype.setSession = function (_a) {
        var accessToken = _a.accessToken, _b = _a.idTokenPayload, email = _b.email, email_verified = _b.email_verified, expiresInS = _a.expiresIn;
        var expiresInMs = expiresInS * 1000;
        this.accessToken = accessToken;
        this.expiresAt = expiresInMs + new Date().getTime();
        console.debug("[Auth0] Token expires in: " + expiresInS + " seconds");
        console.debug("[Auth0] Token renewal threshold: " + this.renewalThreshold + " seconds");
        if (this.ignoreRenewalThreshold = expiresInS < this.renewalThreshold) {
            console.warn('[Auth0] Token expiry is less than renewal threshold. Renewal threshold will be ignored.');
        }
        this.userInfo = { email: email, verified: email_verified };
    };
    return Auth0;
}());
exports.default = Auth0;
