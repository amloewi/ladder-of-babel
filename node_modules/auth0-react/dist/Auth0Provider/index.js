"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var auth0_1 = __importDefault(require("../auth0"));
var useLocalStorage_1 = __importDefault(require("lib/hooks/useLocalStorage"));
var Auth0Context_1 = __importDefault(require("./Auth0Context"));
exports.Auth0Context = Auth0Context_1.default;
exports.CURRENT_AUTH0_USER_KEY = 'CURRENT_AUTH0_USER';
exports.AFTER_LOGIN_PATH_KEY = 'AFTER_LOGIN_PATH';
function Auth0Provider(_a) {
    var children = _a.children, rest = __rest(_a, ["children"]);
    var _b = react_1.useState(false), isAuthenticating = _b[0], setIsAuthenticating = _b[1];
    var audience = rest.audience, domain = rest.domain, clientId = rest.clientId, callbackUrl = rest.callbackUrl, logoutUrl = rest.logoutUrl, renewalThreshold = rest.renewalThreshold;
    // Holds a reference to a single Auth instance between renders
    var auth = react_1.useRef(new auth0_1.default(audience, domain, clientId, callbackUrl, logoutUrl, renewalThreshold)).current;
    // Store current user info in local storage for quick retrieval between page loads
    // Note: there can be a current user stored when user is not authenticated
    var _c = useLocalStorage_1.default(exports.CURRENT_AUTH0_USER_KEY), storedUser = _c[0], setStoredUser = _c[1], unsetStoredUser = _c[2];
    var _d = useLocalStorage_1.default(exports.AFTER_LOGIN_PATH_KEY), afterLoginPath = _d[0], setAfterLoginPath = _d[1], unsetAfterLoginPath = _d[2];
    // Stores the current auth0 accessToken for use around the app
    // Note: we store the token in memory not localstorage as it is
    // vulnerable to JS injection and XSS attacks
    // https://auth0.com/docs/security/store-tokens#don-t-store-tokens-in-local-storage
    function getCurrentToken() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!auth.hasExpiredToken) return [3 /*break*/, 2];
                        return [4 /*yield*/, auth.renewSession()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, auth.accessToken];
                }
            });
        });
    }
    var wasAuthenticated = !!storedUser;
    var isAuthenticated = auth.isAuthenticated;
    function login(afterLoginPath) {
        setIsAuthenticating(true);
        if (afterLoginPath) {
            setAfterLoginPath(afterLoginPath);
        }
        auth.login();
    }
    function logout() {
        auth.logout(function () {
            unsetStoredUser();
        });
    }
    function renewSession() {
        return __awaiter(this, void 0, void 0, function () {
            var authResult, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        setIsAuthenticating(true);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, auth.renewSession()];
                    case 2:
                        authResult = _a.sent();
                        handleLoginSuccess(authResult);
                        return [3 /*break*/, 5];
                    case 3:
                        error_1 = _a.sent();
                        handleLoginFailure(error_1);
                        throw error_1;
                    case 4:
                        setIsAuthenticating(false);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    function onAuthCallback() {
        return __awaiter(this, void 0, void 0, function () {
            var authResult, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        setIsAuthenticating(true);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, auth.handleCallback()];
                    case 2:
                        authResult = _a.sent();
                        handleLoginSuccess(authResult);
                        return [3 /*break*/, 5];
                    case 3:
                        error_2 = _a.sent();
                        handleLoginFailure(error_2);
                        throw error_2;
                    case 4:
                        setIsAuthenticating(false);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    function handleLoginSuccess(authResult) {
        setIsAuthenticating(false);
        setStoredUser({ email: auth.email });
    }
    function handleLoginFailure(_) {
        unsetStoredUser();
    }
    react_1.useEffect(function () {
        if (wasAuthenticated) {
            renewSession();
        }
    }, []);
    return (react_1.default.createElement(Auth0Context_1.default.Provider, { value: {
            isAuthenticated: isAuthenticated,
            wasAuthenticated: wasAuthenticated,
            isAuthenticating: isAuthenticating,
            getCurrentToken: getCurrentToken,
            login: login,
            logout: logout,
            onAuthCallback: onAuthCallback
        } }, children));
}
exports.default = Auth0Provider;
