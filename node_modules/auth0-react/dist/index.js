'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var auth0Js = require('auth0-js');
var React = require('react');
var React__default = _interopDefault(React);
var reactRouterDom = require('react-router-dom');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var Auth0 = /** @class */ (function () {
    function Auth0(audience, domain, clientId, redirectUri, logoutRedirectUri, renewalThreshold) {
        if (renewalThreshold === void 0) { renewalThreshold = 0; }
        this.logoutRedirectUri = logoutRedirectUri;
        this.renewalThreshold = renewalThreshold;
        this.ignoreRenewalThreshold = false;
        this.auth0 = new auth0Js.WebAuth({
            audience: audience,
            domain: domain,
            clientID: clientId,
            redirectUri: redirectUri,
            responseType: 'token id_token',
            scope: 'openid email'
        });
    }
    Auth0.prototype.login = function () {
        console.debug('[Auth0] Started login');
        this.auth0.authorize();
    };
    Auth0.prototype.handleCallback = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                console.debug('[Auth0] Received auth callback');
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.auth0.parseHash(function (error, authResult) {
                            if (authResult && authResult.accessToken && authResult.idToken) {
                                console.debug('[Auth0] Logged in successfully');
                                _this.setSession(authResult);
                                resolve(authResult);
                            }
                            else {
                                console.error('[Auth0] Error logging in', error);
                                reject(error);
                            }
                        });
                    })];
            });
        });
    };
    Auth0.prototype.renewSession = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                console.debug('[Auth0] Started renewing session');
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.auth0.checkSession({}, function (error, authResult) {
                            if (authResult && authResult.accessToken && authResult.idToken) {
                                console.debug('[Auth0] Success renewing session');
                                _this.setSession(authResult);
                                resolve(authResult);
                            }
                            else {
                                console.error('[Auth0] Error renewing session', error);
                                _this.logout();
                                reject(error);
                            }
                        });
                    })];
            });
        });
    };
    Auth0.prototype.logout = function (onSuccess) {
        this.accessToken = undefined;
        this.expiresAt = 0;
        this.userInfo = undefined;
        this.ignoreRenewalThreshold = false;
        this.auth0.logout({
            returnTo: this.logoutRedirectUri
        }, function (error) {
            if (error) {
                console.error('[Auth0] Error logging out', error);
            }
            else if (onSuccess) {
                onSuccess();
            }
        });
    };
    Object.defineProperty(Auth0.prototype, "isAuthenticated", {
        get: function () {
            return this.hasValidToken && !!this.userInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Auth0.prototype, "hasValidToken", {
        get: function () {
            return !!this.accessToken && !this.hasExpired;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Auth0.prototype, "hasExpiredToken", {
        get: function () {
            return !!this.accessToken && this.hasExpired;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Auth0.prototype, "hasExpired", {
        get: function () {
            var threshold = this.ignoreRenewalThreshold ? 0 : this.renewalThreshold * 1000;
            return this.expiresAt - threshold < new Date().getTime();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Auth0.prototype, "email", {
        get: function () {
            if (this.userInfo)
                return this.userInfo.email;
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Auth0.prototype.setSession = function (_a) {
        var accessToken = _a.accessToken, _b = _a.idTokenPayload, email = _b.email, email_verified = _b.email_verified, expiresInS = _a.expiresIn;
        var expiresInMs = expiresInS * 1000;
        this.accessToken = accessToken;
        this.expiresAt = expiresInMs + new Date().getTime();
        console.debug("[Auth0] Token expires in: " + expiresInS + " seconds");
        console.debug("[Auth0] Token renewal threshold: " + this.renewalThreshold + " seconds");
        if (this.ignoreRenewalThreshold = expiresInS < this.renewalThreshold) {
            console.warn('[Auth0] Token expiry is less than renewal threshold. Renewal threshold will be ignored.');
        }
        this.userInfo = { email: email, verified: email_verified };
    };
    return Auth0;
}());

// Stores and retrieves items from local storage
function useLocalStorage (key, cache, initialValue) {
    if (cache === void 0) { cache = true; }
    // This hook needs state in order to force a re-render when setting/unsetting if cache is true
    var _a = React.useState(initialValue), _ = _a[0], setCachedItem = _a[1];
    function getItem() {
        try {
            return JSON.parse(localStorage.getItem(key) || '');
        }
        catch (_a) {
            return undefined;
        }
    }
    function setItem(value) {
        var jsonValue = JSON.stringify(value);
        localStorage.setItem(key, jsonValue);
        if (cache)
            setCachedItem(jsonValue);
    }
    function unsetItem() {
        localStorage.removeItem(key);
        if (cache)
            setCachedItem(null);
    }
    return [getItem(), setItem, unsetItem];
}

var defaultContext = {
    isAuthenticated: false,
    isAuthenticating: false,
    wasAuthenticated: false,
    getCurrentToken: function () {
        return new Promise(function (resolve, _) { return resolve(undefined); });
    },
    login: function () { },
    logout: function () { },
    onAuthCallback: function () { }
};
var Auth0Context = React.createContext(defaultContext);

var CURRENT_AUTH0_USER_KEY = 'CURRENT_AUTH0_USER';
var AFTER_LOGIN_PATH_KEY = 'AFTER_LOGIN_PATH';
function Auth0Provider(_a) {
    var children = _a.children, rest = __rest(_a, ["children"]);
    var _b = React.useState(false), isAuthenticating = _b[0], setIsAuthenticating = _b[1];
    var audience = rest.audience, domain = rest.domain, clientId = rest.clientId, callbackUrl = rest.callbackUrl, logoutUrl = rest.logoutUrl, renewalThreshold = rest.renewalThreshold;
    // Holds a reference to a single Auth instance between renders
    var auth = React.useRef(new Auth0(audience, domain, clientId, callbackUrl, logoutUrl, renewalThreshold)).current;
    // Store current user info in local storage for quick retrieval between page loads
    // Note: there can be a current user stored when user is not authenticated
    var _c = useLocalStorage(CURRENT_AUTH0_USER_KEY), storedUser = _c[0], setStoredUser = _c[1], unsetStoredUser = _c[2];
    var _d = useLocalStorage(AFTER_LOGIN_PATH_KEY), setAfterLoginPath = _d[1];
    // Stores the current auth0 accessToken for use around the app
    // Note: we store the token in memory not localstorage as it is
    // vulnerable to JS injection and XSS attacks
    // https://auth0.com/docs/security/store-tokens#don-t-store-tokens-in-local-storage
    function getCurrentToken() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!auth.hasExpiredToken) return [3 /*break*/, 2];
                        return [4 /*yield*/, auth.renewSession()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, auth.accessToken];
                }
            });
        });
    }
    var wasAuthenticated = !!storedUser;
    var isAuthenticated = auth.isAuthenticated;
    function login(afterLoginPath) {
        setIsAuthenticating(true);
        if (afterLoginPath) {
            setAfterLoginPath(afterLoginPath);
        }
        auth.login();
    }
    function logout() {
        auth.logout(function () {
            unsetStoredUser();
        });
    }
    function renewSession() {
        return __awaiter(this, void 0, void 0, function () {
            var authResult, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        setIsAuthenticating(true);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, auth.renewSession()];
                    case 2:
                        authResult = _a.sent();
                        handleLoginSuccess();
                        return [3 /*break*/, 5];
                    case 3:
                        error_1 = _a.sent();
                        handleLoginFailure();
                        throw error_1;
                    case 4:
                        setIsAuthenticating(false);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    function onAuthCallback() {
        return __awaiter(this, void 0, void 0, function () {
            var authResult, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        setIsAuthenticating(true);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, auth.handleCallback()];
                    case 2:
                        authResult = _a.sent();
                        handleLoginSuccess();
                        return [3 /*break*/, 5];
                    case 3:
                        error_2 = _a.sent();
                        handleLoginFailure();
                        throw error_2;
                    case 4:
                        setIsAuthenticating(false);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    function handleLoginSuccess(authResult) {
        setIsAuthenticating(false);
        setStoredUser({ email: auth.email });
    }
    function handleLoginFailure(_) {
        unsetStoredUser();
    }
    React.useEffect(function () {
        if (wasAuthenticated) {
            renewSession();
        }
    }, []);
    return (React__default.createElement(Auth0Context.Provider, { value: {
            isAuthenticated: isAuthenticated,
            wasAuthenticated: wasAuthenticated,
            isAuthenticating: isAuthenticating,
            getCurrentToken: getCurrentToken,
            login: login,
            logout: logout,
            onAuthCallback: onAuthCallback
        } }, children));
}

var useAuth0 = (function () { return React.useContext(Auth0Context); });

function CallbackComponent(_a) {
    var successTo = _a.successTo, errorTo = _a.errorTo, history = _a.history;
    var onAuthCallback = useAuth0().onAuthCallback;
    var _b = useLocalStorage(AFTER_LOGIN_PATH_KEY, false), afterLoginPath = _b[0], unsetAfterLoginPath = _b[2];
    function handleAuthCallback() {
        return __awaiter(this, void 0, void 0, function () {
            var _a, error, errorDescription;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, onAuthCallback()];
                    case 1:
                        _b.sent();
                        history.replace(afterLoginPath || successTo);
                        return [3 /*break*/, 3];
                    case 2:
                        _a = _b.sent();
                        error = _a.error, errorDescription = _a.errorDescription;
                        history.replace(errorTo, { error: error, errorDescription: errorDescription });
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    // Useing useEffect prevents callback from being called twice in a row,
    // for example if component is somteteehow re-rendered while callback is processing
    React.useEffect(function () {
        handleAuthCallback();
        return function () {
            unsetAfterLoginPath();
        };
    }, []);
    return null;
}
function Auth0CallbackRoute(_a) {
    var _b = _a.path, path = _b === void 0 ? '/auth/callback' : _b, successTo = _a.successTo, errorTo = _a.errorTo, rest = __rest(_a, ["path", "successTo", "errorTo"]);
    return (React__default.createElement(reactRouterDom.Route, __assign({}, rest, { path: path, render: function (props) { return (React__default.createElement(CallbackComponent, __assign({}, props, { successTo: successTo, errorTo: errorTo }))); } })));
}

exports.AFTER_LOGIN_PATH_KEY = AFTER_LOGIN_PATH_KEY;
exports.Auth = Auth0;
exports.Auth0CallbackRoute = Auth0CallbackRoute;
exports.Auth0Context = Auth0Context;
exports.Auth0Provider = Auth0Provider;
exports.CURRENT_AUTH0_USER_KEY = CURRENT_AUTH0_USER_KEY;
exports.useAuth0 = useAuth0;
//# sourceMappingURL=index.js.map
