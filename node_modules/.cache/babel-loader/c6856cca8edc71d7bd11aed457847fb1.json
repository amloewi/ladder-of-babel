{"ast":null,"code":"var _jsxFileName = \"/Users/amloewi/Code/lob/src/App.js\";\n// const {useState} = React;\n// function App () {\n//   function Child(props) {\n//     const {caption} = props;\n//     const {lines, setLines} = props.pstate;\n//     return <button onClick={() => {\n//       setLines([...lines, lines.length]);\n//     }}>\n//       {caption}\n//     </button>;\n//   }\n//   function Parent(props) {\n//     const [lines, setLines] = useState([0]);  \n//     return lines.map(m => <Child key={m} caption={`Click ${m}`} pstate={{lines, setLines}}/>);\n//   }\n//   return (\n//     <Parent />\n//   )\n// }\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css'; // function Translator() {  // how do I call this, below? like -- anything else I imagine\n//   return (\n//     <div>\n//       <input type=\"text\"></input>\n//       <button>Translate</button>\n//     </div>\n//   )\n// }\n\nfunction App() {\n  function Translation(props) {\n    // This is super sloppy for all sorts of reasons; do need the chinese punctuation though\n    const punctuation = [\"，\", \"。\", \"「\", \"」\", \"、\", \"‧\", \".\", \";\", \" \", \"\\t\"]; // read in cedict.js; for fuck's sake\n\n    const translation = [];\n    const remaining_characters = props.text;\n\n    while (remaining_characters.length > 0) {\n      let word_boundary = 1;\n      const best_candidate = null;\n\n      while (remaining_characters.length > 0) {\n        const candidate = remaining_characters.slice(start = 0, end = word_boundary); // [:word_boundary] // XXX\n\n        if (candidate in cedict && word_boundary <= remaining_characters.length) {\n          best_candidate = candidate;\n          word_boundary += 1;\n        } else {\n          // candidate is NOT in the dictionary\n          if (best_candidate != null) {\n            // at least the first character was recognized\n            translation.push([best_candidate, cedict[best_candidate]]);\n          } else {\n            token = remaining_characters[0];\n            definition = token in punctuation ? \"\" : \"??\"; // \"\\n\" if token in punctuation else \"??\\n\"  // \n\n            translation.push([token, definition]);\n          }\n\n          if (word_boundary > 1) {\n            remaining_characters = remaining_characters.slice(word_boundary - 1); // [word_boundary-1:]\n          } else {\n            remaining_characters = remaining_characters.slice(word_boundary); // [word_boundary:]\n          }\n\n          break;\n        }\n      }\n    }\n\n    return translation.map(word => /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, word['chinese']), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }, word['definition'])));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"script\", {\n    type: \"text/javascript\",\n    src: \"cedict.js\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, \"Hello react!\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: produce_translation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \"Translate\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Translation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/amloewi/Code/lob/src/App.js"],"names":["React","useState","useEffect","App","Translation","props","punctuation","translation","remaining_characters","text","length","word_boundary","best_candidate","candidate","slice","start","end","cedict","push","token","definition","map","word","produce_translation"],"mappings":"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","sourcesContent":["// const {useState} = React;\n\n// function App () {\n//   function Child(props) {\n//     const {caption} = props;\n//     const {lines, setLines} = props.pstate;\n//     return <button onClick={() => {\n//       setLines([...lines, lines.length]);\n//     }}>\n//       {caption}\n//     </button>;\n//   }\n\n//   function Parent(props) {\n//     const [lines, setLines] = useState([0]);  \n//     return lines.map(m => <Child key={m} caption={`Click ${m}`} pstate={{lines, setLines}}/>);\n//   }\n//   return (\n//     <Parent />\n//   )\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// function Translator() {  // how do I call this, below? like -- anything else I imagine\n//   return (\n//     <div>\n//       <input type=\"text\"></input>\n//       <button>Translate</button>\n//     </div>\n//   )\n// }\n\nfunction App() {\n\n  function Translation(props) { \n    // This is super sloppy for all sorts of reasons; do need the chinese punctuation though\n    const punctuation = [\"，\", \"。\", \"「\", \"」\", \"、\", \"‧\", \".\", \";\", \" \", \"\\t\"]\n\n    // read in cedict.js; for fuck's sake\n    const translation = []\n    const remaining_characters = props.text\n    while (remaining_characters.length > 0) {\n        let word_boundary = 1\n        const best_candidate = null\n        while (remaining_characters.length > 0) {\n            const candidate = remaining_characters.slice(start=0, end=word_boundary)  // [:word_boundary] // XXX\n            if ((candidate in cedict) && (word_boundary <= remaining_characters.length)) {\n                best_candidate = candidate\n                word_boundary += 1\n            } else {  // candidate is NOT in the dictionary\n                if (best_candidate != null) {  // at least the first character was recognized\n                    translation.push([best_candidate, cedict[best_candidate]])\n                } else {\n                    token = remaining_characters[0]\n                    definition = token in punctuation ? \"\" : \"??\"  // \"\\n\" if token in punctuation else \"??\\n\"  // \n                    translation.push([token, definition])\n                }\n                if (word_boundary > 1) {\n                    remaining_characters = remaining_characters.slice(word_boundary-1)  // [word_boundary-1:]\n                } else {\n                    remaining_characters = remaining_characters.slice(word_boundary)  // [word_boundary:]\n                }\n                break\n            }\n        }\n    }\n    return(\n      translation.map(word =>\n        <div class=\"row\">\n          <div className=\"col-md-4\">{word['chinese']}</div>\n          <div className=\"col-md-8\">{word['definition']}</div>\n        </div>\n      )\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <script type=\"text/javascript\" src=\"cedict.js\"></script>\n      </header>\n      <h1>Hello react!</h1>\n      <input type=\"text\"></input>\n      <button onClick={produce_translation}>\n        Translate\n      </button>\n      <br></br>\n      <Translation />\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}