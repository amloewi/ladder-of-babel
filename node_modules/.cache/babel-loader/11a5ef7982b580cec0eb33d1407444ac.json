{"ast":null,"code":"var _jsxFileName = \"/Users/amloewi/Code/lob/src/App.js\";\nimport React, { useState, useEffect } from 'react'; // const {useState} = React;\n\nfunction App() {\n  function Child(props) {\n    const {\n      caption\n    } = props;\n    const {\n      lines,\n      setLines\n    } = props.pstate;\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        setLines([...lines, lines.length]);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 12\n      }\n    }, caption);\n  }\n\n  function Parent(props) {\n    const [lines, setLines] = useState([0]);\n    return lines.map(m => /*#__PURE__*/React.createElement(Child, {\n      key: m,\n      caption: `Click ${m}`,\n      pstate: {\n        lines,\n        setLines\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 27\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Parent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  });\n} // ReactDOM.render(<React.Fragment>\n//   <Parent/>\n// </React.Fragment>, document.querySelector('#mount'));\n\n\nexport default App; // import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// // function Translator() {  // how do I call this, below? like -- anything else I imagine\n// //   return (\n// //     <div>\n// //       <input type=\"text\"></input>\n// //       <button>Translate</button>\n// //     </div>\n// //   )\n// // }\n// function App() {\n//   function produce_translation(tokenized_text) { \n//     // This is super sloppy for all sorts of reasons; do need the chinese punctuation though\n//     punctuation = [\"，\", \"。\", \"「\", \"」\", \"、\", \"‧\", \".\", \";\", \" \", \"\\t\"]\n//     // read in cedict.js; for fuck's sake\n//     translation = []\n//     remaining_characters = tokenized_text\n//     while (remaining_characters.length > 0) {\n//         word_boundary = 1\n//         best_candidate = null\n//         while (remaining_characters.length > 0) {\n//             candidate = remaining_characters.slice(start=0, end=word_boundary)  // [:word_boundary] // XXX\n//             if ((candidate in cedict) && (word_boundary <= remaining_characters.length)) {\n//                 best_candidate = candidate\n//                 word_boundary += 1\n//             } else {  // candidate is NOT in the dictionary\n//                 if (best_candidate != null) {  // at least the first character was recognized\n//                     translation.push([best_candidate, cedict[best_candidate]])\n//                 } else {\n//                     token = remaining_characters[0]\n//                     definition = token in punctuation ? \"\" : \"??\"  // \"\\n\" if token in punctuation else \"??\\n\"  // \n//                     translation.push([token, definition])\n//                 }\n//                 if (word_boundary > 1) {\n//                     remaining_characters = remaining_characters.slice(word_boundary-1)  // [word_boundary-1:]\n//                 } else {\n//                     remaining_characters = remaining_characters.slice(word_boundary)  // [word_boundary:]\n//                 }\n//                 break\n//             }\n//         }\n//     }\n//     return(translation)\n//   }\n//   return (\n//     <div className=\"App\">\n//       {/* <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header> */}\n//       <h1>Hello react!</h1>\n//       <input type=\"text\"></input>\n//       <button onClick={produce_translation}>\n//         Translate\n//       </button>\n//       <br></br>\n//       for () {\n//       }\n//     </div>\n//   );\n// }\n// export default App;","map":{"version":3,"sources":["/Users/amloewi/Code/lob/src/App.js"],"names":["React","useState","useEffect","App","Child","props","caption","lines","setLines","pstate","length","Parent","map","m"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AAEA,SAASC,GAAT,GAAgB;AACd,WAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,UAAM;AAACC,MAAAA;AAAD,QAAYD,KAAlB;AACA,UAAM;AAACE,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAoBH,KAAK,CAACI,MAAhC;AACA,wBAAO;AAAQ,MAAA,OAAO,EAAE,MAAM;AAC5BD,QAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWA,KAAK,CAACG,MAAjB,CAAD,CAAR;AACD,OAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGJJ,OAHI,CAAP;AAKD;;AAED,WAASK,MAAT,CAAgBN,KAAhB,EAAuB;AACrB,UAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAC,CAAD,CAAD,CAAlC;AACA,WAAOM,KAAK,CAACK,GAAN,CAAUC,CAAC,iBAAI,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,CAAZ;AAAe,MAAA,OAAO,EAAG,SAAQA,CAAE,EAAnC;AAAsC,MAAA,MAAM,EAAE;AAACN,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAf,CAAP;AACD;;AACD,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,C,CAGD;AACA;AACA;;;AAEA,eAAeL,GAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// const {useState} = React;\n\nfunction App () {\n  function Child(props) {\n    const {caption} = props;\n    const {lines, setLines} = props.pstate;\n    return <button onClick={() => {\n      setLines([...lines, lines.length]);\n    }}>\n      {caption}\n    </button>;\n  }\n\n  function Parent(props) {\n    const [lines, setLines] = useState([0]);  \n    return lines.map(m => <Child key={m} caption={`Click ${m}`} pstate={{lines, setLines}}/>);\n  }\n  return (\n    <Parent />\n  )\n}\n\n\n// ReactDOM.render(<React.Fragment>\n//   <Parent/>\n// </React.Fragment>, document.querySelector('#mount'));\n\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// // function Translator() {  // how do I call this, below? like -- anything else I imagine\n// //   return (\n// //     <div>\n// //       <input type=\"text\"></input>\n// //       <button>Translate</button>\n// //     </div>\n// //   )\n// // }\n\n// function App() {\n\n//   function produce_translation(tokenized_text) { \n//     // This is super sloppy for all sorts of reasons; do need the chinese punctuation though\n//     punctuation = [\"，\", \"。\", \"「\", \"」\", \"、\", \"‧\", \".\", \";\", \" \", \"\\t\"]\n\n//     // read in cedict.js; for fuck's sake\n//     translation = []\n//     remaining_characters = tokenized_text\n//     while (remaining_characters.length > 0) {\n//         word_boundary = 1\n//         best_candidate = null\n//         while (remaining_characters.length > 0) {\n//             candidate = remaining_characters.slice(start=0, end=word_boundary)  // [:word_boundary] // XXX\n//             if ((candidate in cedict) && (word_boundary <= remaining_characters.length)) {\n//                 best_candidate = candidate\n//                 word_boundary += 1\n//             } else {  // candidate is NOT in the dictionary\n//                 if (best_candidate != null) {  // at least the first character was recognized\n//                     translation.push([best_candidate, cedict[best_candidate]])\n//                 } else {\n//                     token = remaining_characters[0]\n//                     definition = token in punctuation ? \"\" : \"??\"  // \"\\n\" if token in punctuation else \"??\\n\"  // \n//                     translation.push([token, definition])\n//                 }\n//                 if (word_boundary > 1) {\n//                     remaining_characters = remaining_characters.slice(word_boundary-1)  // [word_boundary-1:]\n//                 } else {\n//                     remaining_characters = remaining_characters.slice(word_boundary)  // [word_boundary:]\n//                 }\n//                 break\n//             }\n//         }\n//     }\n//     return(translation)\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       {/* <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header> */}\n//       <h1>Hello react!</h1>\n//       <input type=\"text\"></input>\n//       <button onClick={produce_translation}>\n//         Translate\n//       </button>\n//       <br></br>\n//       for () {\n\n//       }\n//     </div>\n//   );\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}