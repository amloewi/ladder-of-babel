{"ast":null,"code":"var _jsxFileName = \"/Users/amloewi/Code/lob/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css'; // function Translator() {  // how do I call this, below? like -- anything else I imagine\n//   return (\n//     <div>\n//       <input type=\"text\"></input>\n//       <button>Translate</button>\n//     </div>\n//   )\n// }\n\nfunction App() {\n  function produce_translation(tokenized_text) {\n    // This is super sloppy for all sorts of reasons; do need the chinese punctuation though\n    punctuation = [\"，\", \"。\", \"「\", \"」\", \"、\", \"‧\", \".\", \";\", \" \", \"\\t\"]; // read in cedict.js; for fuck's sake\n\n    translation = [];\n    remaining_characters = tokenized_text;\n\n    while (remaining_characters.length > 0) {\n      word_boundary = 1;\n      best_candidate = null;\n\n      while (remaining_characters.length > 0) {\n        candidate = remaining_characters.slice(start = 0, end = word_boundary); // [:word_boundary] // XXX\n\n        if (candidate in cedict && word_boundary <= remaining_characters.length) {\n          best_candidate = candidate;\n          word_boundary += 1;\n        } else {\n          // candidate is NOT in the dictionary\n          if (best_candidate != null) {\n            // at least the first character was recognized\n            translation.push([best_candidate, cedict[best_candidate]]);\n          } else {\n            token = remaining_characters[0];\n            definition = token in punctuation ? \"\" : \"??\"; // \"\\n\" if token in punctuation else \"??\\n\"  // \n\n            translation.push([token, definition]);\n          }\n\n          if (word_boundary > 1) {\n            remaining_characters = remaining_characters.slice(word_boundary - 1); // [word_boundary-1:]\n          } else {\n            remaining_characters = remaining_characters.slice(word_boundary); // [word_boundary:]\n          }\n\n          break;\n        }\n      }\n    }\n\n    return translation;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Hello react!\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: produce_translation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, \"Translate\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), \"for () \");\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/amloewi/Code/lob/src/App.js"],"names":["React","App","produce_translation","tokenized_text","punctuation","translation","remaining_characters","length","word_boundary","best_candidate","candidate","slice","start","end","cedict","push","token","definition"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,GAAT,GAAe;AAEb,WAASC,mBAAT,CAA6BC,cAA7B,EAA6C;AAC3C;AACAC,IAAAA,WAAW,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,IAA9C,CAAd,CAF2C,CAI3C;;AACAC,IAAAA,WAAW,GAAG,EAAd;AACAC,IAAAA,oBAAoB,GAAGH,cAAvB;;AACA,WAAOG,oBAAoB,CAACC,MAArB,GAA8B,CAArC,EAAwC;AACpCC,MAAAA,aAAa,GAAG,CAAhB;AACAC,MAAAA,cAAc,GAAG,IAAjB;;AACA,aAAOH,oBAAoB,CAACC,MAArB,GAA8B,CAArC,EAAwC;AACpCG,QAAAA,SAAS,GAAGJ,oBAAoB,CAACK,KAArB,CAA2BC,KAAK,GAAC,CAAjC,EAAoCC,GAAG,GAACL,aAAxC,CAAZ,CADoC,CACgC;;AACpE,YAAKE,SAAS,IAAII,MAAd,IAA0BN,aAAa,IAAIF,oBAAoB,CAACC,MAApE,EAA6E;AACzEE,UAAAA,cAAc,GAAGC,SAAjB;AACAF,UAAAA,aAAa,IAAI,CAAjB;AACH,SAHD,MAGO;AAAG;AACN,cAAIC,cAAc,IAAI,IAAtB,EAA4B;AAAG;AAC3BJ,YAAAA,WAAW,CAACU,IAAZ,CAAiB,CAACN,cAAD,EAAiBK,MAAM,CAACL,cAAD,CAAvB,CAAjB;AACH,WAFD,MAEO;AACHO,YAAAA,KAAK,GAAGV,oBAAoB,CAAC,CAAD,CAA5B;AACAW,YAAAA,UAAU,GAAGD,KAAK,IAAIZ,WAAT,GAAuB,EAAvB,GAA4B,IAAzC,CAFG,CAE4C;;AAC/CC,YAAAA,WAAW,CAACU,IAAZ,CAAiB,CAACC,KAAD,EAAQC,UAAR,CAAjB;AACH;;AACD,cAAIT,aAAa,GAAG,CAApB,EAAuB;AACnBF,YAAAA,oBAAoB,GAAGA,oBAAoB,CAACK,KAArB,CAA2BH,aAAa,GAAC,CAAzC,CAAvB,CADmB,CACiD;AACvE,WAFD,MAEO;AACHF,YAAAA,oBAAoB,GAAGA,oBAAoB,CAACK,KAArB,CAA2BH,aAA3B,CAAvB,CADG,CAC+D;AACrE;;AACD;AACH;AACJ;AACJ;;AACD,WAAOH,WAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAfF,eAgBE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,eAiBE;AAAQ,IAAA,OAAO,EAAEH,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAjBF,eAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,YADF;AA2BD;;AAED,eAAeD,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// function Translator() {  // how do I call this, below? like -- anything else I imagine\n//   return (\n//     <div>\n//       <input type=\"text\"></input>\n//       <button>Translate</button>\n//     </div>\n//   )\n// }\n\nfunction App() {\n  \n  function produce_translation(tokenized_text) { \n    // This is super sloppy for all sorts of reasons; do need the chinese punctuation though\n    punctuation = [\"，\", \"。\", \"「\", \"」\", \"、\", \"‧\", \".\", \";\", \" \", \"\\t\"]\n\n    // read in cedict.js; for fuck's sake\n    translation = []\n    remaining_characters = tokenized_text\n    while (remaining_characters.length > 0) {\n        word_boundary = 1\n        best_candidate = null\n        while (remaining_characters.length > 0) {\n            candidate = remaining_characters.slice(start=0, end=word_boundary)  // [:word_boundary] // XXX\n            if ((candidate in cedict) && (word_boundary <= remaining_characters.length)) {\n                best_candidate = candidate\n                word_boundary += 1\n            } else {  // candidate is NOT in the dictionary\n                if (best_candidate != null) {  // at least the first character was recognized\n                    translation.push([best_candidate, cedict[best_candidate]])\n                } else {\n                    token = remaining_characters[0]\n                    definition = token in punctuation ? \"\" : \"??\"  // \"\\n\" if token in punctuation else \"??\\n\"  // \n                    translation.push([token, definition])\n                }\n                if (word_boundary > 1) {\n                    remaining_characters = remaining_characters.slice(word_boundary-1)  // [word_boundary-1:]\n                } else {\n                    remaining_characters = remaining_characters.slice(word_boundary)  // [word_boundary:]\n                }\n                break\n            }\n        }\n    }\n    return(translation)\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <h1>Hello react!</h1>\n      <input type=\"text\"></input>\n      <button onClick={produce_translation}>\n        Translate\n      </button>\n      <br></br>\n      for () {\n\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}