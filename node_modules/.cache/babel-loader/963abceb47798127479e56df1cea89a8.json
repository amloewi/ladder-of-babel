{"ast":null,"code":"var _jsxFileName = \"/Users/amloewi/Code/lob/src/App.js\";\n// const {useState} = React;\n// function App () {\n//   function Child(props) {\n//     const {caption} = props;\n//     const {lines, setLines} = props.pstate;\n//     return <button onClick={() => {\n//       setLines([...lines, lines.length]);\n//     }}>\n//       {caption}\n//     </button>;\n//   }\n//   function Parent(props) {\n//     const [lines, setLines] = useState([0]);  \n//     return lines.map(m => <Child key={m} caption={`Click ${m}`} pstate={{lines, setLines}}/>);\n//   }\n//   return (\n//     <Parent />\n//   )\n// }\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { cedict } from \"./small.js\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'; // This was necessary; ugh\n\nimport { Container, Row, Col } from 'react-bootstrap'; // import { cedict } from \"./cedict.js\"  // think it works; crashed everything\n// import { } from 'react-bootstrap';  // \n// function Translator() {  // how do I call this, below? like -- anything else I imagine\n//   return (\n//     <div>\n//       <input type=\"text\"></input>\n//       <button>Translate</button>\n//     </div>\n//   )\n// }\n\nfunction App() {\n  function Translation(props) {\n    // This is super sloppy for all sorts of reasons; do need the chinese punctuation though\n    const punctuation = [\"，\", \"。\", \"「\", \"」\", \"、\", \"‧\", \".\", \";\", \" \", \"\\t\"];\n    const translation = [];\n    let remaining_characters = props.text;\n\n    while (remaining_characters.length > 0) {\n      let word_boundary = 1;\n      let best_candidate = null;\n\n      while (remaining_characters.length > 0) {\n        const candidate = remaining_characters.slice(0, word_boundary); // [:word_boundary] // XXX\n\n        console.log(candidate);\n        console.log(candidate in cedict); // fuck; different ... something. Fuck!\n\n        if (candidate in cedict && word_boundary <= remaining_characters.length) {\n          best_candidate = candidate;\n          word_boundary += 1;\n        } else {\n          // candidate is NOT in the dictionary\n          if (best_candidate != null) {\n            // at least the first character was recognized\n            translation.push({\n              \"token\": best_candidate,\n              \"definition\": cedict[best_candidate]\n            });\n          } else {\n            const token = remaining_characters[0];\n            const definition = token in punctuation ? \"\" : \"??\"; // \"\\n\" if token in punctuation else \"??\\n\"  // \n\n            translation.push({\n              \"token\": token,\n              \"definition\": definition\n            });\n          }\n\n          if (word_boundary > 1) {\n            remaining_characters = remaining_characters.slice(word_boundary - 1); // [word_boundary-1:]\n          } else {\n            remaining_characters = remaining_characters.slice(word_boundary); // [word_boundary:]\n          }\n\n          break;\n        }\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, translation.map((word, ix) => /*#__PURE__*/React.createElement(Row, {\n      key: ix,\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, word[\"token\"]), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, word[\"definition\"]))));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"Hello react!\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Translation, {\n    text: \"\\u5341\\u6708\\u5341\\u4E00\\u65E5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/amloewi/Code/lob/src/App.js"],"names":["React","useState","useEffect","cedict","Container","Row","Col","App","Translation","props","punctuation","translation","remaining_characters","text","length","word_boundary","best_candidate","candidate","slice","console","log","push","token","definition","map","word","ix","textAlign"],"mappings":"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","sourcesContent":["// const {useState} = React;\n\n// function App () {\n//   function Child(props) {\n//     const {caption} = props;\n//     const {lines, setLines} = props.pstate;\n//     return <button onClick={() => {\n//       setLines([...lines, lines.length]);\n//     }}>\n//       {caption}\n//     </button>;\n//   }\n\n//   function Parent(props) {\n//     const [lines, setLines] = useState([0]);  \n//     return lines.map(m => <Child key={m} caption={`Click ${m}`} pstate={{lines, setLines}}/>);\n//   }\n//   return (\n//     <Parent />\n//   )\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { cedict } from \"./small.js\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'; // This was necessary; ugh\nimport { Container, Row, Col } from 'react-bootstrap';\n// import { cedict } from \"./cedict.js\"  // think it works; crashed everything\n// import { } from 'react-bootstrap';  // \n\n// function Translator() {  // how do I call this, below? like -- anything else I imagine\n//   return (\n//     <div>\n//       <input type=\"text\"></input>\n//       <button>Translate</button>\n//     </div>\n//   )\n// }\n\nfunction App() {\n\n  function Translation(props) { \n    // This is super sloppy for all sorts of reasons; do need the chinese punctuation though\n    const punctuation = [\"，\", \"。\", \"「\", \"」\", \"、\", \"‧\", \".\", \";\", \" \", \"\\t\"]\n\n    const translation = []\n    let remaining_characters = props.text\n    while (remaining_characters.length > 0) {\n        let word_boundary = 1\n        let best_candidate = null\n        while (remaining_characters.length > 0) {\n            const candidate = remaining_characters.slice(0, word_boundary)  // [:word_boundary] // XXX\n            console.log(candidate)\n            console.log(candidate in cedict) // fuck; different ... something. Fuck!\n            if ((candidate in cedict) && (word_boundary <= remaining_characters.length)) {\n                best_candidate = candidate\n                word_boundary += 1\n            } else {  // candidate is NOT in the dictionary\n                if (best_candidate != null) {  // at least the first character was recognized\n                    translation.push({\"token\": best_candidate, \"definition\": cedict[best_candidate]})\n                } else {\n                    const token = remaining_characters[0]\n                    const definition = token in punctuation ? \"\" : \"??\"  // \"\\n\" if token in punctuation else \"??\\n\"  // \n                    translation.push({\"token\": token, \"definition\": definition} )\n                }\n                if (word_boundary > 1) {\n                    remaining_characters = remaining_characters.slice(word_boundary-1)  // [word_boundary-1:]\n                } else {\n                    remaining_characters = remaining_characters.slice(word_boundary)  // [word_boundary:]\n                }\n                break\n            }\n        }\n    }\n    return(\n      <Container>\n        {translation.map((word, ix) =>\n          <Row key={ix} style={{textAlign: \"left\"}}>\n            <Col md={2}>{word[\"token\"]}</Col>\n            <Col md={8}>{word[\"definition\"]}</Col>\n          </Row>\n        )}\n      </Container>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n\n      <h1>Hello react!</h1>\n      <input type=\"text\"></input>\n      {/* <button onClick={() => Translation()}>\n        Translate\n      </button> */}\n      <br></br>\n      <Translation \n        text=\"十月十一日\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}