{"ast":null,"code":"var _jsxFileName = \"/Users/amloewi/Code/lob/src/App.js\";\n// const {useState} = React;\n// function App () {\n//   function Child(props) {\n//     const {caption} = props;\n//     const {lines, setLines} = props.pstate;\n//     return <button onClick={() => {\n//       setLines([...lines, lines.length]);\n//     }}>\n//       {caption}\n//     </button>;\n//   }\n//   function Parent(props) {\n//     const [lines, setLines] = useState([0]);  \n//     return lines.map(m => <Child key={m} caption={`Click ${m}`} pstate={{lines, setLines}}/>);\n//   }\n//   return (\n//     <Parent />\n//   )\n// }\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { cedict } from \"./test.js\";\nimport 'react-bootstrap'; // import { cedict } from \"./cedict.js\"  // think it works; crashed everything\n// import { } from 'react-bootstrap';  // \n// function Translator() {  // how do I call this, below? like -- anything else I imagine\n//   return (\n//     <div>\n//       <input type=\"text\"></input>\n//       <button>Translate</button>\n//     </div>\n//   )\n// }\n\nfunction App() {\n  function Test(props) {\n    const hello = cedict['hello'];\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, hello);\n  }\n\n  function Translation(props) {\n    // This is super sloppy for all sorts of reasons; do need the chinese punctuation though\n    const punctuation = [\"，\", \"。\", \"「\", \"」\", \"、\", \"‧\", \".\", \";\", \" \", \"\\t\"];\n    const translation = [];\n    let remaining_characters = props.text;\n    alert(props.text);\n\n    while (remaining_characters.length > 0) {\n      let word_boundary = 1;\n      const best_candidate = null;\n\n      while (remaining_characters.length > 0) {\n        const candidate = remaining_characters.slice(0, word_boundary); // [:word_boundary] // XXX\n\n        if (candidate in cedict && word_boundary <= remaining_characters.length) {\n          best_candidate = candidate;\n          word_boundary += 1;\n        } else {\n          // candidate is NOT in the dictionary\n          if (best_candidate != null) {\n            // at least the first character was recognized\n            translation.push([best_candidate, cedict[best_candidate]]);\n          } else {\n            const token = remaining_characters[0];\n            const definition = token in punctuation ? \"\" : \"??\"; // \"\\n\" if token in punctuation else \"??\\n\"  // \n\n            translation.push([token, definition]);\n          }\n\n          if (word_boundary > 1) {\n            remaining_characters = remaining_characters.slice(word_boundary - 1); // [word_boundary-1:]\n          } else {\n            remaining_characters = remaining_characters.slice(word_boundary); // [word_boundary:]\n          }\n\n          break;\n        }\n      }\n    }\n\n    return (\n      /*#__PURE__*/\n      // translation.map((word, ix) =>\n      //   <div key={ix} className=\"row\">\n      //     <div className=\"col-md-4\">{word['chinese']}</div>\n      //     <div className=\"col-md-8\">{word['definition']}</div>\n      //   </div>\n      // )\n      React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }, props.text)\n    );\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"Hello react!\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Translation, {\n    text: \"\\u5341\\u6708\\u5341\\u4E00\\u65E5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Test, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/amloewi/Code/lob/src/App.js"],"names":["React","useState","useEffect","cedict","App","Test","props","hello","Translation","punctuation","translation","remaining_characters","text","alert","length","word_boundary","best_candidate","candidate","slice","push","token","definition"],"mappings":"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","sourcesContent":["// const {useState} = React;\n\n// function App () {\n//   function Child(props) {\n//     const {caption} = props;\n//     const {lines, setLines} = props.pstate;\n//     return <button onClick={() => {\n//       setLines([...lines, lines.length]);\n//     }}>\n//       {caption}\n//     </button>;\n//   }\n\n//   function Parent(props) {\n//     const [lines, setLines] = useState([0]);  \n//     return lines.map(m => <Child key={m} caption={`Click ${m}`} pstate={{lines, setLines}}/>);\n//   }\n//   return (\n//     <Parent />\n//   )\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { cedict } from \"./test.js\"\nimport 'react-bootstrap'\n// import { cedict } from \"./cedict.js\"  // think it works; crashed everything\n// import { } from 'react-bootstrap';  // \n\n// function Translator() {  // how do I call this, below? like -- anything else I imagine\n//   return (\n//     <div>\n//       <input type=\"text\"></input>\n//       <button>Translate</button>\n//     </div>\n//   )\n// }\n\nfunction App() {\n\n  function Test(props) {\n    const hello = cedict['hello']\n    return (\n      <h1>{hello}</h1>\n    )\n  }\n\n  function Translation(props) { \n    // This is super sloppy for all sorts of reasons; do need the chinese punctuation though\n    const punctuation = [\"，\", \"。\", \"「\", \"」\", \"、\", \"‧\", \".\", \";\", \" \", \"\\t\"]\n\n    const translation = []\n    let remaining_characters = props.text\n    alert(props.text)\n    while (remaining_characters.length > 0) {\n        let word_boundary = 1\n        const best_candidate = null\n        while (remaining_characters.length > 0) {\n            const candidate = remaining_characters.slice(0, word_boundary)  // [:word_boundary] // XXX\n            if ((candidate in cedict) && (word_boundary <= remaining_characters.length)) {\n                best_candidate = candidate\n                word_boundary += 1\n            } else {  // candidate is NOT in the dictionary\n                if (best_candidate != null) {  // at least the first character was recognized\n                    translation.push([best_candidate, cedict[best_candidate]])\n                } else {\n                    const token = remaining_characters[0]\n                    const definition = token in punctuation ? \"\" : \"??\"  // \"\\n\" if token in punctuation else \"??\\n\"  // \n                    translation.push([token, definition])\n                }\n                if (word_boundary > 1) {\n                    remaining_characters = remaining_characters.slice(word_boundary-1)  // [word_boundary-1:]\n                } else {\n                    remaining_characters = remaining_characters.slice(word_boundary)  // [word_boundary:]\n                }\n                break\n            }\n        }\n    }\n    return(\n      // translation.map((word, ix) =>\n      //   <div key={ix} className=\"row\">\n      //     <div className=\"col-md-4\">{word['chinese']}</div>\n      //     <div className=\"col-md-8\">{word['definition']}</div>\n      //   </div>\n      // )\n      <div className=\"row\">{props.text}</div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n\n      <h1>Hello react!</h1>\n      <input type=\"text\"></input>\n      {/* <button onClick={() => Translation()}>\n        Translate\n      </button> */}\n      <br></br>\n      <Translation \n        text=\"十月十一日\"\n      />\n      <Test />\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}